//COMMON QUEUE
class MyQueue {
public:
    int tail, head;
    vector<int> queue;
    MyQueue(int K_MAX) {//max_length of queue
        head = 0;
        tail = -1;
        queue.assign(K_MAX, 0);
    }
    void push(int x) {
        tail = (tail+1)%3;
        queue[tail] = x;
    }
    int pop() {
        int t = head;
        head = (head+1)%3;
        return queue[t];
    }
    int peek() {
        return queue[head];
    }
    bool empty() {
        return tail == head-1;
    }
};


//HAND-MADE PRIORITY QUEUE
void heap_push(vector<int>& heap, int x){
    int pos = (int) heap.size();
    heap.push_back(x);
    while (pos > 0 && heap[pos] < heap[(pos-1)/2]){
        swap(heap[pos], heap[(pos-1)/2]);
        pos = (pos-1)/2;   
    }
}
void heap_erase(vector<int>& heap){
    int isz = (int) heap.size();
    heap[0] = heap[isz - 1];
    int i = 0;
    while (i*2+2 < isz){
        int min_son_index = 2*i + 1;
        if (heap[i*2+2] < heap[min_son_index]) min_son_index = i*2+2;
        if (heap[i] > heap[min_son_index]){
            swap(heap[i], heap[min_son_index]);
            i = min_son_index;
        }
        else break;
    }
    heap.pop_back();
}




//
